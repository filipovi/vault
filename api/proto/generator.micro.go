// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/generator.proto

/*
Package generator is a generated protocol buffer package.

It is generated from these files:
	proto/generator.proto

It has these top-level messages:
	NewPasswordRequest
	NewPasswordResponse
*/
package generator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Generator service

type GeneratorService interface {
	NewPassword(ctx context.Context, in *NewPasswordRequest, opts ...client.CallOption) (*NewPasswordResponse, error)
}

type generatorService struct {
	c    client.Client
	name string
}

func NewGeneratorService(name string, c client.Client) GeneratorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "generator"
	}
	return &generatorService{
		c:    c,
		name: name,
	}
}

func (c *generatorService) NewPassword(ctx context.Context, in *NewPasswordRequest, opts ...client.CallOption) (*NewPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "Generator.NewPassword", in)
	out := new(NewPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Generator service

type GeneratorHandler interface {
	NewPassword(context.Context, *NewPasswordRequest, *NewPasswordResponse) error
}

func RegisterGeneratorHandler(s server.Server, hdlr GeneratorHandler, opts ...server.HandlerOption) error {
	type generator interface {
		NewPassword(ctx context.Context, in *NewPasswordRequest, out *NewPasswordResponse) error
	}
	type Generator struct {
		generator
	}
	h := &generatorHandler{hdlr}
	return s.Handle(s.NewHandler(&Generator{h}, opts...))
}

type generatorHandler struct {
	GeneratorHandler
}

func (h *generatorHandler) NewPassword(ctx context.Context, in *NewPasswordRequest, out *NewPasswordResponse) error {
	return h.GeneratorHandler.NewPassword(ctx, in, out)
}
